import java.io.*;
import java.util.*;

class Student {
    String studentId;
    String name;
    String rollNo;
    String className;
    int marks;
    String address;

    public Student(String studentId, String name, String rollNo, String className, int marks, String address) {
        this.studentId = studentId;
        this.name = name;
        this.rollNo = rollNo;
        this.className = className;
        this.marks = marks;
        this.address = address;
    }

    @Override
    public String toString() {
        return studentId + "," + name + "," + rollNo + "," + className + "," + marks + "," + address;
    }
}

public class Assignment8 {
    private static final String FILE_NAME = "database.txt";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n1. Create Database");
            System.out.println("2. Display Database");
            System.out.println("3. Delete Records");
            System.out.println("4. Update Record");
            System.out.println("5. Search Record");
            System.out.println("6. Add New Record");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    createDatabase();
                    break;
                case 2:
                    displayDatabase();
                    break;
                case 3:
                    deleteRecord();
                    break;
                case 4:
                    updateRecord();
                    break;
                case 5:
                    searchRecord();
                    break;
                case 6:
                    addNewRecord();
                    break;
                case 0:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);

        scanner.close();
    }

    private static void createDatabase() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true))) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter number of students to add: ");
            int n = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            for (int i = 0; i < n; i++) {
                Student student = inputStudentDetails(scanner);
                writer.write(student.toString());
                writer.newLine();
            }
            System.out.println("Database created successfully.");
        } catch (IOException e) {
            System.out.println("An error occurred while creating the database.");
            e.printStackTrace();
        }
    }

    private static void displayDatabase() {
        try (Scanner fileScanner = new Scanner(new File(FILE_NAME))) {
            System.out.println("\nStudent Records:");
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                String[] parts = line.split(",");
                System.out.println("ID: " + parts[0] + ", Name: " + parts[1] + ", Roll No: " + parts[2] +
                        ", Class: " + parts[3] + ", Marks: " + parts[4] + ", Address: " + parts[5]);
            }
        } catch (FileNotFoundException e) {
            System.out.println("Database file not found.");
            e.printStackTrace();
        }
    }

    private static void deleteRecord() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Student ID to delete: ");
        String idToDelete = scanner.nextLine();

        List<String> records = new ArrayList<>();
        boolean found = false;

        try (Scanner fileScanner = new Scanner(new File(FILE_NAME))) {
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                if (!line.startsWith(idToDelete)) {
                    records.add(line);
                } else {
                    found = true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Database file not found.");
            e.printStackTrace();
            return;
        }

        if (found) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
                for (String record : records) {
                    writer.write(record);
                    writer.newLine();
                }
                System.out.println("Record deleted successfully.");
            } catch (IOException e) {
                System.out.println("An error occurred while updating the database.");
                e.printStackTrace();
            }
        } else {
            System.out.println("Record not found.");
        }
    }

    private static void updateRecord() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Student ID to update: ");
        String idToUpdate = scanner.nextLine();

        List<String> records = new ArrayList<>();
        boolean found = false;

        try (Scanner fileScanner = new Scanner(new File(FILE_NAME))) {
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                if (line.startsWith(idToUpdate)) {
                    found = true;
                    String[] parts = line.split(",");
                    System.out.println("Current record: " + line);
                    System.out.println("Enter new details (press Enter to keep current value):");

                    Student updatedStudent = inputStudentDetails(scanner, parts);
                    records.add(updatedStudent.toString());
                } else {
                    records.add(line);
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Database file not found.");
            e.printStackTrace();
            return;
        }

        if (found) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
                for (String record : records) {
                    writer.write(record);
                    writer.newLine();
                }
                System.out.println("Record updated successfully.");
            } catch (IOException e) {
                System.out.println("An error occurred while updating the database.");
                e.printStackTrace();
            }
        } else {
            System.out.println("Record not found.");
        }
    }

    private static void searchRecord() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Student ID to search: ");
        String idToSearch = scanner.nextLine();

        try (Scanner fileScanner = new Scanner(new File(FILE_NAME))) {
            boolean found = false;
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                if (line.startsWith(idToSearch)) {
                    String[] parts = line.split(",");
                    System.out.println("Record found:");
                    System.out.println("ID: " + parts[0] + ", Name: " + parts[1] + ", Roll No: " + parts[2] +
                            ", Class: " + parts[3] + ", Marks: " + parts[4] + ", Address: " + parts[5]);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("Record not found.");
            }
        } catch (FileNotFoundException e) {
            System.out.println("Database file not found.");
            e.printStackTrace();
        }
    }

    private static void addNewRecord() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true))) {
            Scanner scanner = new Scanner(System.in);
            Student student = inputStudentDetails(scanner);
            writer.write(student.toString());
            writer.newLine();
            System.out.println("New record added successfully.");
        } catch (IOException e) {
            System.out.println("An error occurred while adding the new record.");
            e.printStackTrace();
        }
    }

    private static Student inputStudentDetails(Scanner scanner) {
        System.out.print("Student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.print("Roll No: ");
        String rollNo = scanner.nextLine();
        System.out.print("Class: ");
        String className = scanner.nextLine();
        System.out.print("Marks: ");
        int marks = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Address: ");
        String address = scanner.nextLine();

        return new Student(studentId, name, rollNo, className, marks, address);
    }

    private static Student inputStudentDetails(Scanner scanner, String[] currentDetails) {
        System.out.print("Name (" + currentDetails[1] + "): ");
        String name = scanner.nextLine();
        name = name.isEmpty() ? currentDetails[1] : name;

        System.out.print("Roll No (" + currentDetails[2] + "): ");
        String rollNo = scanner.nextLine();
        rollNo = rollNo.isEmpty() ? currentDetails[2] : rollNo;

        System.out.print("Class (" + currentDetails[3] + "): ");
        String className = scanner.nextLine();
        className = className.isEmpty() ? currentDetails[3] : className;

        System.out.print("Marks (" + currentDetails[4] + "): ");
        String marksStr = scanner.nextLine();
        int marks = marksStr.isEmpty() ? Integer.parseInt(currentDetails[4]) : Integer.parseInt(marksStr);

        System.out.print("Address (" + currentDetails[5] + "): ");
        String address = scanner.nextLine();
        address = address.isEmpty() ? currentDetails[5] : address;

        return new Student(currentDetails[0], name, rollNo, className, marks, address);
    }
}